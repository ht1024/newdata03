{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport warning from 'warning';\nimport { getDisplayName } from '@material-ui/utils';\n\nfunction mergeClasses() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var baseClasses = options.baseClasses,\n      newClasses = options.newClasses,\n      Component = options.Component;\n\n  if (!newClasses) {\n    return baseClasses;\n  }\n\n  var nextClasses = _extends({}, baseClasses);\n\n  if (process.env.NODE_ENV !== 'production' && typeof newClasses === 'string') {\n    process.env.NODE_ENV !== \"production\" ? warning(false, [\"Material-UI: the value `\".concat(newClasses, \"` \") + \"provided to the classes prop of \".concat(getDisplayName(Component), \" is incorrect.\"), 'You might want to use the className prop instead.'].join('\\n')) : void 0;\n    return baseClasses;\n  }\n\n  Object.keys(newClasses).forEach(function (key) {\n    process.env.NODE_ENV !== \"production\" ? warning(baseClasses[key] || !newClasses[key], [\"Material-UI: the key `\".concat(key, \"` \") + \"provided to the classes prop is not implemented in \".concat(getDisplayName(Component), \".\"), \"You can only override one of the following: \".concat(Object.keys(baseClasses).join(','), \".\")].join('\\n')) : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!newClasses[key] || typeof newClasses[key] === 'string', [\"Material-UI: the key `\".concat(key, \"` \") + \"provided to the classes prop is not valid for \".concat(getDisplayName(Component), \".\"), \"You need to provide a non empty string instead of: \".concat(newClasses[key], \".\")].join('\\n')) : void 0;\n\n    if (newClasses[key]) {\n      nextClasses[key] = \"\".concat(baseClasses[key], \" \").concat(newClasses[key]);\n    }\n  });\n  return nextClasses;\n}\n\nexport default mergeClasses;","map":{"version":3,"sources":["/Users/tristan2020/Documents/newdata03/node_modules/@material-ui/styles/esm/mergeClasses/mergeClasses.js"],"names":["_extends","warning","getDisplayName","mergeClasses","options","arguments","length","undefined","baseClasses","newClasses","Component","nextClasses","process","env","NODE_ENV","concat","join","Object","keys","forEach","key"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,cAAT,QAA+B,oBAA/B;;AAEA,SAASC,YAAT,GAAwB;AACtB,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA,MAAIG,WAAW,GAAGJ,OAAO,CAACI,WAA1B;AAAA,MACIC,UAAU,GAAGL,OAAO,CAACK,UADzB;AAAA,MAEIC,SAAS,GAAGN,OAAO,CAACM,SAFxB;;AAIA,MAAI,CAACD,UAAL,EAAiB;AACf,WAAOD,WAAP;AACD;;AAED,MAAIG,WAAW,GAAGX,QAAQ,CAAC,EAAD,EAAKQ,WAAL,CAA1B;;AAEA,MAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,OAAOL,UAAP,KAAsB,QAAnE,EAA6E;AAC3EG,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCb,OAAO,CAAC,KAAD,EAAQ,CAAC,2BAA2Bc,MAA3B,CAAkCN,UAAlC,EAA8C,IAA9C,IAAsD,mCAAmCM,MAAnC,CAA0Cb,cAAc,CAACQ,SAAD,CAAxD,EAAqE,gBAArE,CAAvD,EAA+I,mDAA/I,EAAoMM,IAApM,CAAyM,IAAzM,CAAR,CAA/C,GAAyQ,KAAK,CAA9Q;AACA,WAAOR,WAAP;AACD;;AAEDS,EAAAA,MAAM,CAACC,IAAP,CAAYT,UAAZ,EAAwBU,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAC7CR,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCb,OAAO,CAACO,WAAW,CAACY,GAAD,CAAX,IAAoB,CAACX,UAAU,CAACW,GAAD,CAAhC,EAAuC,CAAC,yBAAyBL,MAAzB,CAAgCK,GAAhC,EAAqC,IAArC,IAA6C,sDAAsDL,MAAtD,CAA6Db,cAAc,CAACQ,SAAD,CAA3E,EAAwF,GAAxF,CAA9C,EAA4I,+CAA+CK,MAA/C,CAAsDE,MAAM,CAACC,IAAP,CAAYV,WAAZ,EAAyBQ,IAAzB,CAA8B,GAA9B,CAAtD,EAA0F,GAA1F,CAA5I,EAA4OA,IAA5O,CAAiP,IAAjP,CAAvC,CAA/C,GAAgV,KAAK,CAArV;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCb,OAAO,CAAC,CAACQ,UAAU,CAACW,GAAD,CAAX,IAAoB,OAAOX,UAAU,CAACW,GAAD,CAAjB,KAA2B,QAAhD,EAA0D,CAAC,yBAAyBL,MAAzB,CAAgCK,GAAhC,EAAqC,IAArC,IAA6C,iDAAiDL,MAAjD,CAAwDb,cAAc,CAACQ,SAAD,CAAtE,EAAmF,GAAnF,CAA9C,EAAuI,sDAAsDK,MAAtD,CAA6DN,UAAU,CAACW,GAAD,CAAvE,EAA8E,GAA9E,CAAvI,EAA2NJ,IAA3N,CAAgO,IAAhO,CAA1D,CAA/C,GAAkV,KAAK,CAAvV;;AAEA,QAAIP,UAAU,CAACW,GAAD,CAAd,EAAqB;AACnBT,MAAAA,WAAW,CAACS,GAAD,CAAX,GAAmB,GAAGL,MAAH,CAAUP,WAAW,CAACY,GAAD,CAArB,EAA4B,GAA5B,EAAiCL,MAAjC,CAAwCN,UAAU,CAACW,GAAD,CAAlD,CAAnB;AACD;AACF,GAPD;AAQA,SAAOT,WAAP;AACD;;AAED,eAAeR,YAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport warning from 'warning';\nimport { getDisplayName } from '@material-ui/utils';\n\nfunction mergeClasses() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var baseClasses = options.baseClasses,\n      newClasses = options.newClasses,\n      Component = options.Component;\n\n  if (!newClasses) {\n    return baseClasses;\n  }\n\n  var nextClasses = _extends({}, baseClasses);\n\n  if (process.env.NODE_ENV !== 'production' && typeof newClasses === 'string') {\n    process.env.NODE_ENV !== \"production\" ? warning(false, [\"Material-UI: the value `\".concat(newClasses, \"` \") + \"provided to the classes prop of \".concat(getDisplayName(Component), \" is incorrect.\"), 'You might want to use the className prop instead.'].join('\\n')) : void 0;\n    return baseClasses;\n  }\n\n  Object.keys(newClasses).forEach(function (key) {\n    process.env.NODE_ENV !== \"production\" ? warning(baseClasses[key] || !newClasses[key], [\"Material-UI: the key `\".concat(key, \"` \") + \"provided to the classes prop is not implemented in \".concat(getDisplayName(Component), \".\"), \"You can only override one of the following: \".concat(Object.keys(baseClasses).join(','), \".\")].join('\\n')) : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!newClasses[key] || typeof newClasses[key] === 'string', [\"Material-UI: the key `\".concat(key, \"` \") + \"provided to the classes prop is not valid for \".concat(getDisplayName(Component), \".\"), \"You need to provide a non empty string instead of: \".concat(newClasses[key], \".\")].join('\\n')) : void 0;\n\n    if (newClasses[key]) {\n      nextClasses[key] = \"\".concat(baseClasses[key], \" \").concat(newClasses[key]);\n    }\n  });\n  return nextClasses;\n}\n\nexport default mergeClasses;"]},"metadata":{},"sourceType":"module"}