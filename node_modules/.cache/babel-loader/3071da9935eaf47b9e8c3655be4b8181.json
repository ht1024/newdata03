{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hexToRgb = hexToRgb;\nexports.rgbToHex = rgbToHex;\nexports.hslToRgb = hslToRgb;\nexports.decomposeColor = decomposeColor;\nexports.recomposeColor = recomposeColor;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.emphasize = emphasize;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n/* eslint-disable no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\n\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(value >= min && value <= max, \"Material-UI: the value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\")) : void 0;\n\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction hexToRgb(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length / 3, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb(\".concat(colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(int) {\n  var hex = int.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\n\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  var _color = color,\n      values = _color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error([\"Material-UI: unsupported `\".concat(color, \"` color.\"), 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\n'));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(function (val) {\n    val /= 255; // normalized\n\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}","map":{"version":3,"sources":["/Users/tristan2020/Documents/GitHub/newdata03/node_modules/@material-ui/core/styles/colorManipulator.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","hexToRgb","rgbToHex","hslToRgb","decomposeColor","recomposeColor","getContrastRatio","getLuminance","emphasize","fade","darken","lighten","_warning","clamp","min","arguments","length","undefined","max","process","env","NODE_ENV","default","concat","color","substr","re","RegExp","colors","match","map","n","parseInt","join","intToHex","int","hex","toString","indexOf","_decomposeColor","values","_color","h","s","l","a","Math","f","k","type","rgb","round","push","charAt","marker","substring","Error","split","parseFloat","i","foreground","background","lumA","lumB","val","pow","Number","toFixed","coefficient"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hexToRgb = hexToRgb;\nexports.rgbToHex = rgbToHex;\nexports.hslToRgb = hslToRgb;\nexports.decomposeColor = decomposeColor;\nexports.recomposeColor = recomposeColor;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.emphasize = emphasize;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\n/* eslint-disable no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(value >= min && value <= max, \"Material-UI: the value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\")) : void 0;\n\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction hexToRgb(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length / 3, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb(\".concat(colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(int) {\n  var hex = int.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\n\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  var _color = color,\n      values = _color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error([\"Material-UI: unsupported `\".concat(color, \"` color.\"), 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\n'));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(function (val) {\n    val /= 255; // normalized\n\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}"]},"metadata":{},"sourceType":"script"}