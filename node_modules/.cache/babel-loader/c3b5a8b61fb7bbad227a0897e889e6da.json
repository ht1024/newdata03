{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport warning from 'warning';\nimport deepmerge from 'deepmerge'; // < 1kb payload overhead when lodash/merge is > 3kb.\n\nimport noopTheme from './noopTheme'; // Support for the jss-expand plugin.\n\nfunction arrayMerge(destination, source) {\n  return source;\n}\n\nfunction getStylesCreator(stylesOrCreator) {\n  var themingEnabled = typeof stylesOrCreator === 'function';\n  process.env.NODE_ENV !== \"production\" ? warning(_typeof(stylesOrCreator) === 'object' || themingEnabled, ['Material-UI: the `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\\n')) : void 0;\n  return {\n    create: function create(theme, name) {\n      var styles;\n\n      try {\n        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;\n      } catch (err) {\n        process.env.NODE_ENV !== \"production\" ? warning(!themingEnabled || theme !== noopTheme, ['Material-UI: the `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n')) : void 0;\n        throw err;\n      }\n\n      if (!name || !theme.overrides || !theme.overrides[name]) {\n        return styles;\n      }\n\n      var overrides = theme.overrides[name];\n\n      var stylesWithOverrides = _extends({}, styles);\n\n      Object.keys(overrides).forEach(function (key) {\n        process.env.NODE_ENV !== \"production\" ? warning(stylesWithOverrides[key], ['Material-UI: you are trying to override a style that does not exist.', \"Fix the `\".concat(key, \"` key of `theme.overrides.\").concat(name, \"`.\")].join('\\n')) : void 0;\n        stylesWithOverrides[key] = deepmerge(stylesWithOverrides[key], overrides[key], {\n          arrayMerge: arrayMerge\n        });\n      });\n      return stylesWithOverrides;\n    },\n    options: {},\n    themingEnabled: themingEnabled\n  };\n}\n\nexport default getStylesCreator;","map":{"version":3,"sources":["/Users/tristan2020/Documents/GitHub/newdata03/node_modules/@material-ui/styles/esm/getStylesCreator/getStylesCreator.js"],"names":["_extends","_typeof","warning","deepmerge","noopTheme","arrayMerge","destination","source","getStylesCreator","stylesOrCreator","themingEnabled","process","env","NODE_ENV","join","create","theme","name","styles","err","overrides","stylesWithOverrides","Object","keys","forEach","key","concat","options"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CAAmC;;AAEnC,OAAOC,SAAP,MAAsB,aAAtB,C,CAAqC;;AAErC,SAASC,UAAT,CAAoBC,WAApB,EAAiCC,MAAjC,EAAyC;AACvC,SAAOA,MAAP;AACD;;AAED,SAASC,gBAAT,CAA0BC,eAA1B,EAA2C;AACzC,MAAIC,cAAc,GAAG,OAAOD,eAAP,KAA2B,UAAhD;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,OAAO,CAACD,OAAO,CAACQ,eAAD,CAAP,KAA6B,QAA7B,IAAyCC,cAA1C,EAA0D,CAAC,yDAAD,EAA4D,0EAA5D,EAAwII,IAAxI,CAA6I,IAA7I,CAA1D,CAA/C,GAA+P,KAAK,CAApQ;AACA,SAAO;AACLC,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,KAAhB,EAAuBC,IAAvB,EAA6B;AACnC,UAAIC,MAAJ;;AAEA,UAAI;AACFA,QAAAA,MAAM,GAAGR,cAAc,GAAGD,eAAe,CAACO,KAAD,CAAlB,GAA4BP,eAAnD;AACD,OAFD,CAEE,OAAOU,GAAP,EAAY;AACZR,QAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,OAAO,CAAC,CAACQ,cAAD,IAAmBM,KAAK,KAAKZ,SAA9B,EAAyC,CAAC,yDAAD,EAA4D,8DAA5D,EAA4H,0DAA5H,EAAwLU,IAAxL,CAA6L,IAA7L,CAAzC,CAA/C,GAA8R,KAAK,CAAnS;AACA,cAAMK,GAAN;AACD;;AAED,UAAI,CAACF,IAAD,IAAS,CAACD,KAAK,CAACI,SAAhB,IAA6B,CAACJ,KAAK,CAACI,SAAN,CAAgBH,IAAhB,CAAlC,EAAyD;AACvD,eAAOC,MAAP;AACD;;AAED,UAAIE,SAAS,GAAGJ,KAAK,CAACI,SAAN,CAAgBH,IAAhB,CAAhB;;AAEA,UAAII,mBAAmB,GAAGrB,QAAQ,CAAC,EAAD,EAAKkB,MAAL,CAAlC;;AAEAI,MAAAA,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuBI,OAAvB,CAA+B,UAAUC,GAAV,EAAe;AAC5Cd,QAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,OAAO,CAACmB,mBAAmB,CAACI,GAAD,CAApB,EAA2B,CAAC,sEAAD,EAAyE,YAAYC,MAAZ,CAAmBD,GAAnB,EAAwB,4BAAxB,EAAsDC,MAAtD,CAA6DT,IAA7D,EAAmE,IAAnE,CAAzE,EAAmJH,IAAnJ,CAAwJ,IAAxJ,CAA3B,CAA/C,GAA2O,KAAK,CAAhP;AACAO,QAAAA,mBAAmB,CAACI,GAAD,CAAnB,GAA2BtB,SAAS,CAACkB,mBAAmB,CAACI,GAAD,CAApB,EAA2BL,SAAS,CAACK,GAAD,CAApC,EAA2C;AAC7EpB,UAAAA,UAAU,EAAEA;AADiE,SAA3C,CAApC;AAGD,OALD;AAMA,aAAOgB,mBAAP;AACD,KA1BI;AA2BLM,IAAAA,OAAO,EAAE,EA3BJ;AA4BLjB,IAAAA,cAAc,EAAEA;AA5BX,GAAP;AA8BD;;AAED,eAAeF,gBAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport warning from 'warning';\nimport deepmerge from 'deepmerge'; // < 1kb payload overhead when lodash/merge is > 3kb.\n\nimport noopTheme from './noopTheme'; // Support for the jss-expand plugin.\n\nfunction arrayMerge(destination, source) {\n  return source;\n}\n\nfunction getStylesCreator(stylesOrCreator) {\n  var themingEnabled = typeof stylesOrCreator === 'function';\n  process.env.NODE_ENV !== \"production\" ? warning(_typeof(stylesOrCreator) === 'object' || themingEnabled, ['Material-UI: the `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\\n')) : void 0;\n  return {\n    create: function create(theme, name) {\n      var styles;\n\n      try {\n        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;\n      } catch (err) {\n        process.env.NODE_ENV !== \"production\" ? warning(!themingEnabled || theme !== noopTheme, ['Material-UI: the `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n')) : void 0;\n        throw err;\n      }\n\n      if (!name || !theme.overrides || !theme.overrides[name]) {\n        return styles;\n      }\n\n      var overrides = theme.overrides[name];\n\n      var stylesWithOverrides = _extends({}, styles);\n\n      Object.keys(overrides).forEach(function (key) {\n        process.env.NODE_ENV !== \"production\" ? warning(stylesWithOverrides[key], ['Material-UI: you are trying to override a style that does not exist.', \"Fix the `\".concat(key, \"` key of `theme.overrides.\").concat(name, \"`.\")].join('\\n')) : void 0;\n        stylesWithOverrides[key] = deepmerge(stylesWithOverrides[key], overrides[key], {\n          arrayMerge: arrayMerge\n        });\n      });\n      return stylesWithOverrides;\n    },\n    options: {},\n    themingEnabled: themingEnabled\n  };\n}\n\nexport default getStylesCreator;"]},"metadata":{},"sourceType":"module"}