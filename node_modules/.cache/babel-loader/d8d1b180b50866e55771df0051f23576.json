{"ast":null,"code":"var e = function e(_e) {\n  return parseFloat(_e);\n};\nexport default function (r) {\n  return null == r && (r = r), function (n, t, i, f) {\n    null == i && (i = r), null == f && (f = i);\n    var l = String(n).match(/[\\d.\\-\\+]*\\s*(.*)/)[1] || \"\";\n    if (l === t) return n;\n    var u = e(n);\n    if (\"px\" !== l) if (\"em\" === l) u = e(n) * e(i);else if (\"rem\" === l) u = e(n) * e(r);else {\n      if (\"ex\" !== l) return n;\n      u = e(n) * e(i) * 2;\n    }\n    var a = u;\n    if (\"px\" !== t) if (\"em\" === t) a = u / e(f);else if (\"rem\" === t) a = u / e(r);else {\n      if (\"ex\" !== t) return n;\n      a = u / e(f) / 2;\n    }\n    return parseFloat(a.toFixed(5)) + t;\n  };\n}","map":{"version":3,"sources":["../src/index.js","../src/unit.js"],"names":["const","unitLess","length","parseFloat","baseFontSize","toUnit","fromContext","toContext","fromUnit","pxLength","outputLength","toFixed","String","match"],"mappings":"AAeAA,IAAMC,CAAAA,GAAAA,WAAWC,EAAAA,EAAAA;EAAAA,OAAUC,UAAAA,CAAWD,EAAAA,CAAAA;AAAAA,CAAAA;AAAAA,eAmBvB,UAA0BE,CAAAA,EAAAA;EAAAA,OACnB,IAAA,IAAhBA,CAAAA,KACFA,CAAAA,GAAeA,CAAAA,CAAAA,EAEV,UAASF,CAAAA,EAAQG,CAAAA,EAAQC,CAAAA,EAAaC,CAAAA,EAAAA;IACxB,IAAA,IAAfD,CAAAA,KACFA,CAAAA,GAAcF,CAAAA,CAAAA,EAEC,IAAA,IAAbG,CAAAA,KACFA,CAAAA,GAAYD,CAAAA,CAAAA;IAAAA,IAERE,CAAAA,GC5CDI,MAAAA,CD4CiBV,CAAAA,CAAAA,CC5CHW,KAAAA,CAAM,mBAAA,CAAA,CAAqB,CAAA,CAAA,IAAM,EAAA;IAAA,ID+ChDL,CAAAA,KAAaH,CAAAA,EAAAA,OACRH,CAAAA;IAAAA,IAILO,CAAAA,GAAWR,CAAAA,CAASC,CAAAA,CAAAA;IAAAA,IAYP,IAAA,KAAbM,CAAAA,EAAAA,IACe,IAAA,KAAbA,CAAAA,EACFC,CAAAA,GAAWR,CAAAA,CAASC,CAAAA,CAAAA,GAAUD,CAAAA,CAASK,CAAAA,CAAAA,CAAAA,KAClC,IAAiB,KAAA,KAAbE,CAAAA,EACTC,CAAAA,GAAWR,CAAAA,CAASC,CAAAA,CAAAA,GAAUD,CAAAA,CAASG,CAAAA,CAAAA,CAAAA,KAClC;MAAA,IAAiB,IAAA,KAAbI,CAAAA,EAAAA,OAGFN,CAAAA;MAFPO,CAAAA,GAAWR,CAAAA,CAASC,CAAAA,CAAAA,GAAUD,CAAAA,CAASK,CAAAA,CAAAA,GAAe,CAAA;IAAA;IAAA,IAgBtDI,CAAAA,GAAeD,CAAAA;IAAAA,IACJ,IAAA,KAAXJ,CAAAA,EAAAA,IACa,IAAA,KAAXA,CAAAA,EACFK,CAAAA,GAAeD,CAAAA,GAAWR,CAAAA,CAASM,CAAAA,CAAAA,CAAAA,KAC9B,IAAe,KAAA,KAAXF,CAAAA,EACTK,CAAAA,GAAeD,CAAAA,GAAWR,CAAAA,CAASG,CAAAA,CAAAA,CAAAA,KAC9B;MAAA,IAAe,IAAA,KAAXC,CAAAA,EAAAA,OAUFH,CAAAA;MATPQ,CAAAA,GAAeD,CAAAA,GAAWR,CAAAA,CAASM,CAAAA,CAAAA,GAAa,CAAA;IAAA;IAAA,OAa7CJ,UAAAA,CAAWO,CAAAA,CAAaC,OAAAA,CAAQ,CAAA,CAAA,CAAA,GAAMN,CAAAA;EAAAA,CAAAA;AAAAA","sourcesContent":["/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n\n// Emulate the sass function \"unit\"\nimport unit from \"./unit\"\n\nconst baseFontSize = \"16px\"\n\n// Emulate the sass function \"unitless\"\nconst unitLess = length => parseFloat(length)\n\n// Convert any CSS <length> or <percentage> value to any another.\n//\n// @param length\n//   A css <length> value\n//\n// @param toUnit\n//   String matching a css unit keyword, e.g. 'em', 'rem', etc.\n//\n// @param fromContext\n//   When converting from relative units, the absolute length (in px) to\n//   which length refers (e.g. for lengths in em units, would normally be the\n//   font-size of the current element).\n//\n// @param toContext\n//   For converting to relative units, the absolute length in px to which the\n//   output value will refer. Defaults to the same as fromContext, since it is\n//   rarely needed.\nexport default function convertCSSLength(baseFontSize) {\n  if (baseFontSize == null) {\n    baseFontSize = baseFontSize\n  }\n  return function(length, toUnit, fromContext, toContext) {\n    if (fromContext == null) {\n      fromContext = baseFontSize\n    }\n    if (toContext == null) {\n      toContext = fromContext\n    }\n    const fromUnit = unit(length)\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length\n    }\n\n    // Convert input length to pixels.\n    let pxLength = unitLess(length)\n\n    // Warn if to or from context aren't in pixels.\n    // if (unit(fromContext) !== \"px\") {\n    // console.warn(`Parameter fromContext must resolve to a value \\\n    // in pixel units.`)\n    // }\n    // if (unit(toContext) !== \"px\") {\n    // console.warn(`Parameter toContext must resolve to a value \\\n    // in pixel units.`)\n    // }\n\n    if (fromUnit !== \"px\") {\n      if (fromUnit === \"em\") {\n        pxLength = unitLess(length) * unitLess(fromContext)\n      } else if (fromUnit === \"rem\") {\n        pxLength = unitLess(length) * unitLess(baseFontSize)\n      } else if (fromUnit === \"ex\") {\n        pxLength = unitLess(length) * unitLess(fromContext) * 2\n      } else {\n        return length\n      }\n      // } else if ([\"ch\", \"vw\", \"vh\", \"vmin\"].includes(fromUnit)) {\n      // console.warn(`${fromUnit} units can't be reliably converted; Returning \\\n      // original value.`)\n      // return length\n      // } else {\n      // console.warn(`${fromUnit} is an unknown or unsupported length unit; \\\n      // Returning original value.`)\n      // return length\n      // }\n    }\n\n    // Convert length in pixels to the output unit\n    let outputLength = pxLength\n    if (toUnit !== \"px\") {\n      if (toUnit === \"em\") {\n        outputLength = pxLength / unitLess(toContext)\n      } else if (toUnit === \"rem\") {\n        outputLength = pxLength / unitLess(baseFontSize)\n      } else if (toUnit === \"ex\") {\n        outputLength = pxLength / unitLess(toContext) / 2\n        // } else if ([\"ch\", \"vw\", \"vh\", \"vmin\"].includes(toUnit)) {\n        // console.warn(`${toUnit} units can't be reliably converted; Returning \\\n        // original value.`)\n        // return length\n        // } else {\n        // console.warn(`${toUnit} is an unknown or unsupported length unit; \\\n        // Returning original value.`)\n      } else {\n        return length\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit\n  }\n}\n","export default function unit(input) {\n  return String(input).match(/[\\d.\\-\\+]*\\s*(.*)/)[1] || \"\"\n}\n"]},"metadata":{},"sourceType":"module"}