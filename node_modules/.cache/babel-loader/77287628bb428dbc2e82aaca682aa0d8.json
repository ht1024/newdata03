{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport warning from 'warning';\nimport { exactProp } from '@material-ui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested'; // To support composition of theme.\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    var mergedTheme = localTheme(outerTheme);\n    process.env.NODE_ENV !== \"production\" ? warning(mergedTheme, ['Material-UI: you should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n')) : void 0;\n    return mergedTheme;\n  }\n\n  return _extends({}, outerTheme, {}, localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  var children = props.children,\n      localTheme = props.theme;\n  var outerTheme = useTheme();\n  process.env.NODE_ENV !== \"production\" ? warning(outerTheme !== null || typeof localTheme !== 'function', ['Material-UI: you are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n')) : void 0;\n  var theme = React.useMemo(function () {\n    var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (outerTheme !== null && output) {\n      output[nested] = true;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return React.createElement(ThemeContext.Provider, {\n    value: theme\n  }, children);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;","map":{"version":3,"sources":["/Users/tristan2020/Documents/test folder/newdata03/node_modules/@material-ui/styles/esm/ThemeProvider/ThemeProvider.js"],"names":["_extends","React","PropTypes","warning","exactProp","ThemeContext","useTheme","nested","mergeOuterLocalTheme","outerTheme","localTheme","mergedTheme","process","env","NODE_ENV","join","ThemeProvider","props","children","theme","useMemo","output","createElement","Provider","value","propTypes","node","isRequired","oneOfType","object","func"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAA+B;;AAE/B,SAASC,oBAAT,CAA8BC,UAA9B,EAA0CC,UAA1C,EAAsD;AACpD,MAAI,OAAOA,UAAP,KAAsB,UAA1B,EAAsC;AACpC,QAAIC,WAAW,GAAGD,UAAU,CAACD,UAAD,CAA5B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,OAAO,CAACQ,WAAD,EAAc,CAAC,yEAAD,EAA4E,sCAA5E,EAAoHI,IAApH,CAAyH,IAAzH,CAAd,CAA/C,GAA+L,KAAK,CAApM;AACA,WAAOJ,WAAP;AACD;;AAED,SAAOX,QAAQ,CAAC,EAAD,EAAKS,UAAL,EAAiB,EAAjB,EAAqBC,UAArB,CAAf;AACD;AACD;;;;;;;AAOA,SAASM,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIR,UAAU,GAAGO,KAAK,CAACE,KADvB;AAEA,MAAIV,UAAU,GAAGH,QAAQ,EAAzB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,OAAO,CAACM,UAAU,KAAK,IAAf,IAAuB,OAAOC,UAAP,KAAsB,UAA9C,EAA0D,CAAC,sFAAD,EAAyF,oDAAzF,EAA+I,EAA/I,EAAmJ,qCAAnJ,EAA0L,oEAAoE,4BAA9P,EAA4RK,IAA5R,CAAiS,IAAjS,CAA1D,CAA/C,GAAmZ,KAAK,CAAxZ;AACA,MAAII,KAAK,GAAGlB,KAAK,CAACmB,OAAN,CAAc,YAAY;AACpC,QAAIC,MAAM,GAAGZ,UAAU,KAAK,IAAf,GAAsBC,UAAtB,GAAmCF,oBAAoB,CAACC,UAAD,EAAaC,UAAb,CAApE;;AAEA,QAAID,UAAU,KAAK,IAAf,IAAuBY,MAA3B,EAAmC;AACjCA,MAAAA,MAAM,CAACd,MAAD,CAAN,GAAiB,IAAjB;AACD;;AAED,WAAOc,MAAP;AACD,GARW,EAQT,CAACX,UAAD,EAAaD,UAAb,CARS,CAAZ;AASA,SAAOR,KAAK,CAACqB,aAAN,CAAoBjB,YAAY,CAACkB,QAAjC,EAA2C;AAChDC,IAAAA,KAAK,EAAEL;AADyC,GAA3C,EAEJD,QAFI,CAAP;AAGD;;AAEDN,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCE,aAAa,CAACS,SAAd,GAA0B;AAChE;;;AAGAP,EAAAA,QAAQ,EAAEhB,SAAS,CAACwB,IAAV,CAAeC,UAJuC;;AAMhE;;;AAGAR,EAAAA,KAAK,EAAEjB,SAAS,CAAC0B,SAAV,CAAoB,CAAC1B,SAAS,CAAC2B,MAAX,EAAmB3B,SAAS,CAAC4B,IAA7B,CAApB,EAAwDH;AATC,CAAlE,GAUI,KAAK,CAVT;;AAYA,IAAIf,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCF,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCE,aAAa,CAACS,SAAd,GAA0BrB,SAAS,CAACY,aAAa,CAACS,SAAf,CAA3E,GAAuG,KAAK,CAA5G;AACD;;AAED,eAAeT,aAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport warning from 'warning';\nimport { exactProp } from '@material-ui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested'; // To support composition of theme.\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    var mergedTheme = localTheme(outerTheme);\n    process.env.NODE_ENV !== \"production\" ? warning(mergedTheme, ['Material-UI: you should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n')) : void 0;\n    return mergedTheme;\n  }\n\n  return _extends({}, outerTheme, {}, localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  var children = props.children,\n      localTheme = props.theme;\n  var outerTheme = useTheme();\n  process.env.NODE_ENV !== \"production\" ? warning(outerTheme !== null || typeof localTheme !== 'function', ['Material-UI: you are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n')) : void 0;\n  var theme = React.useMemo(function () {\n    var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (outerTheme !== null && output) {\n      output[nested] = true;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return React.createElement(ThemeContext.Provider, {\n    value: theme\n  }, children);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;"]},"metadata":{},"sourceType":"module"}